package com.leimo.common.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.leimo.common.greendao.bean.CacheInfoEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CACHE_INFO_ENTITY".
*/
public class CacheInfoEntityDao extends AbstractDao<CacheInfoEntity, Long> {

    public static final String TABLENAME = "CACHE_INFO_ENTITY";

    /**
     * Properties of entity CacheInfoEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Key = new Property(1, String.class, "key", false, "KEY");
        public final static Property VersionCode = new Property(2, String.class, "versionCode", false, "VERSION_CODE");
        public final static Property Data = new Property(3, String.class, "data", false, "DATA");
        public final static Property Ext = new Property(4, String.class, "ext", false, "EXT");
        public final static Property TimeCreate = new Property(5, long.class, "timeCreate", false, "TIME_CREATE");
        public final static Property LengthTime = new Property(6, long.class, "lengthTime", false, "LENGTH_TIME");
    }


    public CacheInfoEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CacheInfoEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CACHE_INFO_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"KEY\" TEXT," + // 1: key
                "\"VERSION_CODE\" TEXT," + // 2: versionCode
                "\"DATA\" TEXT," + // 3: data
                "\"EXT\" TEXT," + // 4: ext
                "\"TIME_CREATE\" INTEGER NOT NULL ," + // 5: timeCreate
                "\"LENGTH_TIME\" INTEGER NOT NULL );"); // 6: lengthTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CACHE_INFO_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CacheInfoEntity entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(2, key);
        }
 
        String versionCode = entity.getVersionCode();
        if (versionCode != null) {
            stmt.bindString(3, versionCode);
        }
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(4, data);
        }
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(5, ext);
        }
        stmt.bindLong(6, entity.getTimeCreate());
        stmt.bindLong(7, entity.getLengthTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CacheInfoEntity entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(2, key);
        }
 
        String versionCode = entity.getVersionCode();
        if (versionCode != null) {
            stmt.bindString(3, versionCode);
        }
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(4, data);
        }
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(5, ext);
        }
        stmt.bindLong(6, entity.getTimeCreate());
        stmt.bindLong(7, entity.getLengthTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CacheInfoEntity readEntity(Cursor cursor, int offset) {
        CacheInfoEntity entity = new CacheInfoEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // key
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // versionCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // data
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ext
            cursor.getLong(offset + 5), // timeCreate
            cursor.getLong(offset + 6) // lengthTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CacheInfoEntity entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKey(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVersionCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setData(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExt(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTimeCreate(cursor.getLong(offset + 5));
        entity.setLengthTime(cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CacheInfoEntity entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CacheInfoEntity entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CacheInfoEntity entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
